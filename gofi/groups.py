from gofi.autograd.models import GeneratorModel, GeneratorGroup
from math import factorial

class Group:
    """
    Class representing a group, given by generators and relations.
    """

    def __init__(
        self,
        generators: list[tuple[int]],
        relations: list[list[int]],
        table : list | None = None 
    ) -> None:
        """
        Creates a group, given by generators and relations.

        Parameters
        ----------
        generators : list
            List of generators.
        relations : list[list[int]]
            List of relations of generators.
        table : list
            Table of all the elemets in the group.

        Example usage - S3
        -------------
        S3 is generated by transpositions a=(1,2) and b=(1,3).
        Elemets of S3 are: id, a, b, aba, ab, ba.

        Relations, that define S3, are: a^2=b^2=ababab=0.
        Replaced by indices, this yields `relations  =[[0, 0], [1, 1], [0, 1, 0, 1, 0, 1]]`.
        >>> S3 = GeneratorGroup(
            generators = [(1, 2), (1, 3)],
            relations  =[[0, 0], [1, 1], [0, 1, 0, 1, 0, 1]],
            table = [[], [0], [1], [0, 1, 0], [0, 1], [1, 0]]
            )

        """
        self.generators = generators
        self.n_generators = len(generators)
        self.relations = relations
        self.table = table 
        self.size = len(table)

    def __str__(self) -> str:
        return f"Group of size {self.size} with generators {self.generators} and relations {self.relations}"




demo_S3 = GeneratorGroup(
            generators=[(1, 2), (1, 3)],
            relations=[[0, 0], [1, 1], [0, 1, 0, 1, 0, 1]],
             table = [[], [0], [1], [0, 1, 0], [0, 1], [1, 0]]
        )


demo_C3 = GeneratorGroup(
            generators=["s"],
            relations=[[0,0,0]],
             table = [[], [0], [0,0]]
        )

def coxeter_presentation(n : int):
    '''
    Returns a coxeter presetation of group Sn

    Returns
    ----------
    Sn : GeneratorGroup
        coxeter presentation
    '''
    raise NotImplementedError("TODO : create table (disjoin cycles; cycle to generator)")
    generators = [(i, i+1) for i in range(1, n)]
    size = factorial(n)
    
    # every trasposition squared is 1 
    involution_relations = [[i, i] for i in range(len(generators))]

    #commutativity for nonadjecent swaps
    comm_relations = [[i, j, i, j] for i in range(len(generators)) for j in range(len(generators)) if (abs(i-j) >= 2) and (i < j) ]

    # s_i s_(i+1) s_i =  s_(i+1) s_i  s_(i+1)
    braid_relations = [[i, i+1, i, i+1, i, i+1] for i in range(len(generators) - 1)] 
    
    # all relations
    relations = involution_relations + comm_relations + braid_relations

    # table of all elements

    

def get_S_n(n):
    return coxeter_presentation(n)
